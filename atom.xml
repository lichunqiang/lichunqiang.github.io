<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Light&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.lzuer.net/"/>
  <updated>2016-09-01T01:39:07.506Z</updated>
  <id>http://blog.lzuer.net/</id>
  
  <author>
    <name>light</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL开启binlog, 配置主从小记</title>
    <link href="http://blog.lzuer.net/2016/08/31/mysql-binlog-and-master-slave-configuration/"/>
    <id>http://blog.lzuer.net/2016/08/31/mysql-binlog-and-master-slave-configuration/</id>
    <published>2016-08-31T20:50:22.000Z</published>
    <updated>2016-09-01T01:39:07.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开启binlog"><a href="#开启binlog" class="headerlink" title="开启binlog"></a>开启binlog</h2><p>在 <code>/etc/my.conf</code> 中打开 <code>log-bin=/your/dir</code>, 重启Mysql服务</p>
<blockquote>
<p>根据不同的安装, MySQL的配置文件的位置可能不同, 视具体情况而定.</p>
</blockquote>
<p>配置哪些数据库需要记录binlog:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">binlog-ignore-db=mysql</div><div class="line">binlog-ignore-db=information_schema</div><div class="line">binlog-ignore-db=performance_schema</div><div class="line">binlog-do-db=kit</div></pre></td></tr></table></figure>
<ul>
<li><code>binlog-ignore-db</code>配置哪些数据不需要记录binlog</li>
<li><code>binlog-do-db</code> 配置哪些数据需要记录binlog</li>
</ul>
<h2 id="查看binlog状态"><a href="#查看binlog状态" class="headerlink" title="查看binlog状态"></a>查看binlog状态</h2><h3 id="查看binlog的名称"><a href="#查看binlog的名称" class="headerlink" title="查看binlog的名称"></a>查看binlog的名称</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show binary logs;</div><div class="line">+---------------+-----------+</div><div class="line">| Log_name      | File_size |</div><div class="line">+---------------+-----------+</div><div class="line">| binlog.000001 |       616 |</div><div class="line">+---------------+-----------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<h3 id="查看二进制日志的记录"><a href="#查看二进制日志的记录" class="headerlink" title="查看二进制日志的记录"></a>查看二进制日志的记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show binlog events;</div><div class="line">+---------------+-----+-------------+-----------+-------------+-----------------------------------------------------------------------------------------------------+</div><div class="line">| Log_name      | Pos | Event_type  | Server_id | End_log_pos | Info                                                                                                |</div><div class="line">+---------------+-----+-------------+-----------+-------------+-----------------------------------------------------------------------------------------------------+</div><div class="line">| binlog.000001 |   4 | Format_desc |         1 |         120 | Server ver: 5.6.30-log, Binlog ver: 4                                                               |</div><div class="line">| binlog.000001 | 120 | Query       |         1 |         197 | BEGIN                                                                                               |</div><div class="line">| binlog.000001 | 197 | Query       |         1 |         317 | use `kit`; UPDATE `user` SET `username`=&apos;xxxx&apos; WHERE `id`=5                                         |</div><div class="line">| binlog.000001 | 317 | Xid         |         1 |         348 | COMMIT /* xid=72 */                                                                                 |</div><div class="line">| binlog.000001 | 348 | Query       |         1 |         425 | BEGIN                                                                                               |</div><div class="line">| binlog.000001 | 425 | Query       |         1 |         585 | use `kit`; INSERT INTO `user_profile` (`user_id`, `sex`, `last_login_ip`) VALUES (5, 1, 3232238081) |</div><div class="line">| binlog.000001 | 585 | Xid         |         1 |         616 | COMMIT /* xid=77 */                                                                                 |</div><div class="line">+---------------+-----+-------------+-----------+-------------+-----------------------------------------------------------------------------------------------------+</div><div class="line">7 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<h3 id="导出二进制文件"><a href="#导出二进制文件" class="headerlink" title="导出二进制文件"></a>导出二进制文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mysqlbinlog --start-position=4 --stop-position=585 binlog.000001 &gt; /home/out.txt</div></pre></td></tr></table></figure>
<p>或者全部导出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mysqlbinlog binlog.000001 &gt; /home/out.txt</div></pre></td></tr></table></figure>
<p>导出的文件名可以通过上面的<code>show binary logs;</code> 来查看需要导出的binlog文件</p>
<p>position 可以根据 <code>show binlog events</code>中的<strong>Pos</strong>字段来确定.</p>
<h2 id="配置主从"><a href="#配置主从" class="headerlink" title="配置主从"></a>配置主从</h2><h3 id="查看主库状态"><a href="#查看主库状态" class="headerlink" title="查看主库状态"></a>查看主库状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show master status;</div><div class="line">+---------------+----------+--------------+---------------------------------------------+-------------------+</div><div class="line">| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB                            | Executed_Gtid_Set |</div><div class="line">+---------------+----------+--------------+---------------------------------------------+-------------------+</div><div class="line">| binlog.000003 |      120 | kit          | mysql,information_schema,performance_schema |                   |</div><div class="line">+---------------+----------+--------------+---------------------------------------------+-------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<h2 id="主从配置"><a href="#主从配置" class="headerlink" title="主从配置"></a>主从配置</h2><h3 id="配置主库"><a href="#配置主库" class="headerlink" title="配置主库"></a>配置主库</h3><p>修改Master服务器MySQL配置文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">log-bin=binlog //必须开启binlog</div><div class="line">server-id=1 // 必须, 服务器唯一ID, 默认是1,一般取IP最后一段</div></pre></td></tr></table></figure>
<p>在Master服务器上建立帐户并授权slave:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql &gt; grant replication slave on *.* to slave01@192.168.10.12 identified by &apos;123qwe&apos;;</div></pre></td></tr></table></figure>
<p>重启MySQL.然后查看主库状态.</p>
<h3 id="配置从库"><a href="#配置从库" class="headerlink" title="配置从库"></a>配置从库</h3><p>修改Slave服务器MySQL配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">log-bin=binlog //不是必须</div><div class="line">server-id=2 //必须, 需要唯一,一般取IP最后一段</div></pre></td></tr></table></figure>
<p>重启MySQL.</p>
<p>配置Slave:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; change master to master_host=&apos;192.168.10.11&apos;,master_user=&apos;slave01&apos;,master_password=&apos;123qwe&apos;;</div><div class="line">mysql&gt; start slave;</div></pre></td></tr></table></figure>
<ul>
<li><code>master_host</code> 配置为Master服务器的IP地址</li>
<li><code>master_user</code> 和 <code>master_password</code> 分别为在Master服务器上进行授权的账号和密码</li>
</ul>
<p>查看从库状态：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mysql&gt;show slave status;</div><div class="line">*************************** 1. row ***************************</div><div class="line">               Slave_IO_State: Waiting for master to send event</div><div class="line">                  Master_Host: 192.168.10.11</div><div class="line">                  Master_User: slave01</div><div class="line">                  Master_Port: 3306</div><div class="line">                Connect_Retry: 60</div><div class="line">              Master_Log_File: binlog.000006</div><div class="line">          Read_Master_Log_Pos: 1155</div><div class="line">               Relay_Log_File: mysqld-relay-bin.000009</div><div class="line">                Relay_Log_Pos: 1315</div><div class="line">        Relay_Master_Log_File: binlog.000006</div><div class="line">             Slave_IO_Running: Yes</div><div class="line">            Slave_SQL_Running: Yes</div><div class="line">							...</div></pre></td></tr></table></figure>
<p>之前需要将主库的数据导到从库.</p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>在从库执行 <code>show slave staus</code> 后发现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Last_IO_Error: Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs;  these UUIDs must be different for replication to work.</div></pre></td></tr></table></figure>
<p>在网上找到的原因和解决方案是：</p>
<p>这个错误是由于主从使用了相同的UUID「在主从的server_id确保是各不相同的情况下」.</p>
<p>首先分别在主从机器上查看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@master ~]# cat /var/lib/mysql/auto.cnf</div><div class="line">[auto]</div><div class="line">server-uuid=3636a3ee-21b8-11e6-aebc-080027e27e5e</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@slave ~]# cat /var/lib/mysql/auto.cnf</div><div class="line">[auto]</div><div class="line">server-uuid=3636a3ee-21b8-11e6-aebc-080027e27e5e</div></pre></td></tr></table></figure>
<p>发现是相同的，可以通过以下方法解决：</p>
<p>在从库机器上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@slave ~]# mv /var/lib/mysql/auto.cnf /var/lib/mysql/auto.cnf.back</div><div class="line">[root@slave ~]# service mysqld restart</div></pre></td></tr></table></figure>
<p>通过重启MySQL来重新生成uuid. 最后问题解决.</p>
<p>另外，我们需要在从库上配置授权访问，保证其他服务器可以访问：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; grant all on *.* to vagrant@&apos;%&apos; identified by &apos;vagrant&apos; with grant option;</div></pre></td></tr></table></figure>
<p><code>%</code>标示任何IP地址都可以进行访问, 当然也可以指定服务器IP, 保证自己的服务器能够访问, 而其他IP不能访问。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开启binlog&quot;&gt;&lt;a href=&quot;#开启binlog&quot; class=&quot;headerlink&quot; title=&quot;开启binlog&quot;&gt;&lt;/a&gt;开启binlog&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;/etc/my.conf&lt;/code&gt; 中打开 &lt;code&gt;log-bin=
    
    </summary>
    
      <category term="MySQL" scheme="http://blog.lzuer.net/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://blog.lzuer.net/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>修复在对textarea进行字数统计时的一个bug</title>
    <link href="http://blog.lzuer.net/2016/08/12/count-words-in-textarea/"/>
    <id>http://blog.lzuer.net/2016/08/12/count-words-in-textarea/</id>
    <published>2016-08-12T20:50:22.000Z</published>
    <updated>2016-09-01T01:39:07.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>一天一位<a href="https://github.com/airyland/vux" target="_blank" rel="external">vux</a>使用提交了这么一个bug: <a href="https://github.com/airyland/vux/issues/420" target="_blank" rel="external">x-textarea字数统计异常</a>.</p>
<p>具体就是在当在textarea中输入回车之后，就会导致字数统计异常, 而对textarea设置了<code>maxlength</code>属性, 这样就会导致如果在textarea中输入过回车，就会导致统计字数还未达上限，但是已经不能输入了.</p>
<p>首先我们来看一下字数统计功能是怎么做的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">count() &#123;</div><div class="line">	return this.value.length</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码中使用了字符串 <code>length</code> 来做字数统计, 但是为什么当有回车时, 这样会导致数字统计异常呢? 是不是只有在textarea中的表现是这样的呢?</p>
<h2 id="验证问题"><a href="#验证问题" class="headerlink" title="验证问题"></a>验证问题</h2><p>首先, 我验证了在input中的表现, 结果是统计表现正常.</p>
<h2 id="发现问题原因"><a href="#发现问题原因" class="headerlink" title="发现问题原因"></a>发现问题原因</h2><p>为什么会这样? 在遨游了「全世界」之后找到了答案：</p>
<p><a href="http://www.bennadel.com/blog/161-ask-ben-javascript-replace-and-multiple-lines-line-breaks.htm" target="_blank" rel="external">http://www.bennadel.com/blog/161-ask-ben-javascript-replace-and-multiple-lines-line-breaks.htm</a></p>
<blockquote>
<p>Textarea values might have the character combos “\n\r” in the text box, but once they are pulled into Javascript, “\n\r” becomes JUST “\n”.</p>
</blockquote>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>导致问题的原因已经找出来了，那么接下来就是解决问题.</p>
<p>上面我们知道, 在输入一个回车后都会导致少统计一个数字, 那么我们可以在进行统计的时候做下处理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">count () &#123;</div><div class="line">	let len = this.value.replace(&apos;\n&apos;, &apos;aa&apos;).length</div><div class="line">	return len &gt; this.max ? this.max : len</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是不是很tricky? 但是却是能解决问题的!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;一天一位&lt;a href=&quot;https://github.com/airyland/vux&quot; target=&quot;_blank&quot; rel=&quot;ext
    
    </summary>
    
      <category term="javascript" scheme="http://blog.lzuer.net/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://blog.lzuer.net/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>一个进程管理工具-supervisor</title>
    <link href="http://blog.lzuer.net/2016/07/30/using-supervisor-to-control-process/"/>
    <id>http://blog.lzuer.net/2016/07/30/using-supervisor-to-control-process/</id>
    <published>2016-07-30T20:50:22.000Z</published>
    <updated>2016-09-01T01:39:07.506Z</updated>
    
    <content type="html"><![CDATA[<p>在实际的开发过程中，经常会用到守护进程来执行相应的代码。例如起一个消费beanstalkd的进程:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$nohup php beanstalkd-consumer.php &amp;</div></pre></td></tr></table></figure>
<p>使用这种方式，我们会发现这个进程会不明不白的「死掉」，导致消费工作无法正常进行。另外，如果一个项目中会涉及到多个守护进程来做相关工作的话，<br>这会导致样管理起来十分的麻烦，而且常常会担心它们会自己偷偷的「死掉」。</p>
<p><a href="http://supervisord.org" target="_blank" rel="external">supervisor</a>就是这样一个工具，可以让我们很轻松愉快的对它们进行统一管理，而且省去了我们担心的某个任务会因为特殊的原因自己偷偷的挂掉。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里我直接使用 <code>yum</code> 进行安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install -y supervisor</div></pre></td></tr></table></figure>
<p>安装成功后，会有两个可执行程序：</p>
<ul>
<li><strong>supervisord</strong>    – supervisor 服务守护进程</li>
<li><strong>supervisorctl</strong> – supervisor 服务控制程序.例如: <code>status/start/stop/restart program</code></li>
</ul>
<p><strong>supervisord</strong>启动时可以通过 <code>-c /some/path/supervisor.conf</code> 来指定加载的配置文件。当然如果没有指定配置文件的位置 <code>supervisord</code> 会按照内部的寻找方式来加载配置文件</p>
<p>因为我是用<code>yum</code>来安装的，所以在 <code>/etc/supervisor.conf</code> 已经存在了默认的配置文件，<code>supervisord</code> 会默认加载。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>最重要的就是对<code>supervisor</code>的行为方式进行配置，通过修改<code>/etc/supervisord.conf</code>来管理.</p>
<p>例如，我们加入上面提到的消费进程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[program:beanstalkd_comsumer]</div><div class="line">command=/usr/local/php/bin/php /path/to/beanstalkd-consumer.php //此项指定要执行的命令</div></pre></td></tr></table></figure>
<p>默认的，<code>supervisor</code>就自动管理进程挂掉自动重启等，我们来看下比较全的配置信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">;[program:theprogramname]</div><div class="line">;command=/bin/cat              ; the program (relative uses PATH, can take args)</div><div class="line">;process_name=%(program_name)s ; process_name expr (default %(program_name)s)</div><div class="line">;numprocs=1                    ; number of processes copies to start (def 1)</div><div class="line">;directory=/tmp                ; directory to cwd to before exec (def no cwd)</div><div class="line">;umask=022                     ; umask for process (default None)</div><div class="line">;priority=999                  ; the relative start priority (default 999)</div><div class="line">;autostart=true                ; start at supervisord start (default: true)</div><div class="line">;autorestart=true              ; retstart at unexpected quit (default: true)</div><div class="line">;startsecs=10                  ; number of secs prog must stay running (def. 1)</div><div class="line">;startretries=3                ; max # of serial start failures (default 3)</div><div class="line">;exitcodes=0,2                 ; &apos;expected&apos; exit codes for process (default 0,2)</div><div class="line">;stopsignal=QUIT               ; signal used to kill process (default TERM)</div><div class="line">;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)</div><div class="line">;user=chrism                   ; setuid to this UNIX account to run the program</div><div class="line">;redirect_stderr=true          ; redirect proc stderr to stdout (default false)</div><div class="line">;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO</div><div class="line">;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</div><div class="line">;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)</div><div class="line">;stdout_capture_maxbytes=1MB   ; number of bytes in &apos;capturemode&apos; (default 0)</div><div class="line">;stdout_events_enabled=false   ; emit events on stdout writes (default false)</div><div class="line">;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO</div><div class="line">;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</div><div class="line">;stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)</div><div class="line">;stderr_capture_maxbytes=1MB   ; number of bytes in &apos;capturemode&apos; (default 0)</div><div class="line">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</div><div class="line">;environment=A=1,B=2           ; process environment additions (def no adds)</div><div class="line">;serverurl=AUTO                ; override serverurl computation (childutils)</div></pre></td></tr></table></figure>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>启动<code>supervisord</code>来启动和管理所有的进程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/bin/supervisord</div></pre></td></tr></table></figure>
<p>启动之后我们可以通过<code>supervisor</code>的另外一个工具来查看所有配置的进程状态:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$supervisorctl status</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">beanstalkd_comsumer           RUNNING   pid 26995, uptime 4:09:54</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在实际的开发过程中，经常会用到守护进程来执行相应的代码。例如起一个消费beanstalkd的进程:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line
    
    </summary>
    
      <category term="supervisor" scheme="http://blog.lzuer.net/categories/supervisor/"/>
    
      <category term="进程管理" scheme="http://blog.lzuer.net/categories/supervisor/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="supervisor" scheme="http://blog.lzuer.net/tags/supervisor/"/>
    
      <category term="进程管理" scheme="http://blog.lzuer.net/tags/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>beanstalkd在centos7下部署小记</title>
    <link href="http://blog.lzuer.net/2016/07/14/deploy-beanstalkd-on-centos7/"/>
    <id>http://blog.lzuer.net/2016/07/14/deploy-beanstalkd-on-centos7/</id>
    <published>2016-07-14T09:26:12.000Z</published>
    <updated>2016-09-01T01:39:07.502Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>下载源代码到本地</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/kr/beanstalkd/archive/v1.10.tar.gz</div></pre></td></tr></table></figure>
<ol>
<li>解压安装</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ tar zxvf v1.10.tar.gz &amp;&amp; rm -rf v1.10.tar.gz</div><div class="line">$ mv beanstalkd-1.10/ /usr/local/beanstalkd</div><div class="line">$ cd /usr/local/beanstalkd</div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure>
<ol>
<li>加入服务以及开机启动</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cp /usr/local/beanstalkd/adm/systemd/beanstalkd.service /usr/lib/systemd/system</div><div class="line">$ systemctl enable beanstalkd.service</div><div class="line">$ systemctl start beanstalkd.service</div></pre></td></tr></table></figure>
<blockquote>
<p>默认beanstalkd开始了binlog, 所以确保默认的目录存在 <code>mkdir -p /var/lib/beanstalkd/binlog</code></p>
</blockquote>
<p>参考资料:</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000002784775" target="_blank" rel="external">https://segmentfault.com/a/1190000002784775</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;下载源代码到本地&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td clas
    
    </summary>
    
      <category term="beanstalkd" scheme="http://blog.lzuer.net/categories/beanstalkd/"/>
    
      <category term="消息队列" scheme="http://blog.lzuer.net/categories/beanstalkd/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="beanstalkd" scheme="http://blog.lzuer.net/tags/beanstalkd/"/>
    
      <category term="消息队列" scheme="http://blog.lzuer.net/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>聊聊PHP中的范围解析操作符</title>
    <link href="http://blog.lzuer.net/2016/07/12/php-scope-resolution-operator/"/>
    <id>http://blog.lzuer.net/2016/07/12/php-scope-resolution-operator/</id>
    <published>2016-07-12T23:57:23.000Z</published>
    <updated>2016-09-01T01:39:07.506Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在PHP中，范围解析操作符可以用于访问静态成员，类常量，还可以用于覆盖类中的属性和方法。</p>
</blockquote>
<p>这是手册中，对于范围解析符的概论。</p>
<p>在日常工作中，我们经常会用在例如：</p>
<ol>
<li>调用类常量: <code>SomeCls::THE_CONST</code>，和<code>public</code>的静态变量 <code>SomeCls::$VAR</code></li>
<li>调用静态方法: <code>SomeCls::staticMethod()</code></li>
</ol>
<p>当然，在于类的内部，我们可以使用 <code>self</code>，<code>parent</code> 和 <code>static</code> 关键字来进行访问。</p>
<p>这里，我要强调的是一种比较常见但是通常我们会忽略的一种用法。</p>
<p>我们经常会看到这样的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Parent</div><div class="line">&#123;</div><div class="line">	public function __construct()&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Child extends Parent</div><div class="line">&#123;</div><div class="line">	public function __construct()</div><div class="line">	&#123;</div><div class="line">		parent::__construct();</div><div class="line">		//some other logic</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们都知道，在 <code>Child</code> 的构造方法中 <code>parent::__construct()</code> 是主动调用父类的构造方法。</p>
<p>但是，为什么会需要我们主动去调用呢？</p>
<blockquote>
<p>当一个子类覆盖父类的方法时，PHP不会调用父类已被覆盖的方法。是否调用父类的方法取决于子类。<br>这种机制也作用于构造函数和析构函数，重载以及魔术方法</p>
</blockquote>
<p>所以，当见到诸如 <code>parent::__construct</code>，<code>parent::__get</code> … 等调用时我们就知道其中的原由了。</p>
<p>为什么会写这篇文章？因为有一天, 我因为看到下面的代码而蒙逼了…当我知道上面的原理后才明白过来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class BasePage</div><div class="line">&#123;</div><div class="line">	protected function renderValue($key, $value)</div><div class="line">	&#123;</div><div class="line">		//...</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Page extends BasePage</div><div class="line">&#123;</div><div class="line">	public function renderValue($key, $value)</div><div class="line">	&#123;</div><div class="line">		$key = $key + $value;</div><div class="line">		parent::renderValue($key, $value);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以文档熟烂于心才是硬道理！</p>
<p>参考资料：</p>
<ul>
<li><a href="http://php.net/manual/en/language.oop5.paamayim-nekudotayim.php" target="_blank" rel="external">http://php.net/manual/en/language.oop5.paamayim-nekudotayim.php</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在PHP中，范围解析操作符可以用于访问静态成员，类常量，还可以用于覆盖类中的属性和方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是手册中，对于范围解析符的概论。&lt;/p&gt;
&lt;p&gt;在日常工作中，我们经常会用在例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用
    
    </summary>
    
      <category term="PHP" scheme="http://blog.lzuer.net/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://blog.lzuer.net/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单例和多例</title>
    <link href="http://blog.lzuer.net/2016/06/23/singleton-and-multiton/"/>
    <id>http://blog.lzuer.net/2016/06/23/singleton-and-multiton/</id>
    <published>2016-06-23T09:26:12.000Z</published>
    <updated>2016-09-01T01:39:07.506Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式和多例模式都禁止外界将其实例化，通过静态工厂方法向外界提供循环使用的自身实例。</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class Singleton</div><div class="line">&#123;</div><div class="line">	/**</div><div class="line">	 * @var static</div><div class="line">	 */</div><div class="line">	private static $instance;</div><div class="line"></div><div class="line">	public static function getInstance()</div><div class="line">	&#123;</div><div class="line">		if (null === static::$instance) &#123;</div><div class="line">			static::$instance = new static();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		return static::$instance;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//单例模式不允许被new</div><div class="line">	private function __construct()&#123;&#125;</div><div class="line"></div><div class="line">	//不允许被clone</div><div class="line">	final public function __clone()</div><div class="line">	&#123;</div><div class="line">		throw new \Exception(&apos;This is singleton, Clone is forbidden.&apos;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//不允许被unserialize</div><div class="line">	final public function __wakeup()</div><div class="line">	&#123;</div><div class="line">		throw new \Exception(&apos;This is singleton, __wakeup is forbidden.&apos;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="多例"><a href="#多例" class="headerlink" title="多例"></a>多例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class Multiton</div><div class="line">&#123;</div><div class="line">	const INSTANCE_1 = &apos;1&apos;;</div><div class="line"></div><div class="line">	const INSTANCE_2 = &apos;2&apos;;</div><div class="line"></div><div class="line">	private static $instances = [];</div><div class="line"></div><div class="line">	private function __construct()&#123;&#125;</div><div class="line"></div><div class="line">	private function __clone()&#123;&#125;</div><div class="line"></div><div class="line">	private function __wakeup()&#123;&#125;</div><div class="line"></div><div class="line">	public static function getInstance($instanceName)</div><div class="line">	&#123;</div><div class="line">		if (!array_key_exists($instanceName, self::$instances)) &#123;</div><div class="line">			self::$instances[$instanceName] = new self();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		return self::$instances[$instanceName];</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>单例模式的主要优点：</p>
<pre><code>* 提供了对唯一实例的受控访问
* 由于在系统中只存在一个对象，因此可以节约资源，对于一些需要频繁创建和销毁的对象可以提高系统性能
* 允许可变数目的实例
</code></pre><p>主要缺点：</p>
<pre><code>* 单例模式没有抽象层，因此扩展很麻烦
* 职责过重，一定程度上违背了“单一职责原则”
* 滥用会带来一些负面问题
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式和多例模式都禁止外界将其实例化，通过静态工厂方法向外界提供循环使用的自身实例。&lt;/p&gt;
&lt;h2 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h2&gt;&lt;figure class=
    
    </summary>
    
      <category term="PHP" scheme="http://blog.lzuer.net/categories/PHP/"/>
    
      <category term="设计模式" scheme="http://blog.lzuer.net/categories/PHP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="PHP" scheme="http://blog.lzuer.net/tags/PHP/"/>
    
      <category term="设计模式" scheme="http://blog.lzuer.net/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>array_merge 和 + 之间的区别</title>
    <link href="http://blog.lzuer.net/2016/06/22/array_merge-vs-+/"/>
    <id>http://blog.lzuer.net/2016/06/22/array_merge-vs-+/</id>
    <published>2016-06-22T21:57:23.000Z</published>
    <updated>2016-09-01T01:39:07.502Z</updated>
    
    <content type="html"><![CDATA[<p>首先，两种方法都能够实现两个或者多个数组之间的合并。但是，两个方法还是有差别的。</p>
<p>+号操作符返回的是右边的数组附加到左边的结果数组。如果存在一个键值都存在两个数组中，那么左边的将会使用，不会被右边的数据给覆盖。</p>
<p>举个栗子： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$a = [&apos;a&apos; =&gt; &apos;apple&apos;, &apos;b&apos; =&gt; &apos;banana&apos;];</div><div class="line"></div><div class="line">$b = [&apos;a&apos; =&gt; &apos;orange&apos;, &apos;c&apos; =&gt; &apos;cherry&apos;];</div><div class="line"></div><div class="line">$c = $a + $b;</div><div class="line"></div><div class="line">var_dump($c);</div></pre></td></tr></table></figure>
<p>将会输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">array(3) &#123;</div><div class="line">  [&quot;a&quot;]=&gt;</div><div class="line">  string(5) &quot;apple&quot;</div><div class="line">  [&quot;b&quot;]=&gt;</div><div class="line">  string(6) &quot;banana&quot;</div><div class="line">  [&quot;c&quot;]=&gt;</div><div class="line">  string(6) &quot;cherry&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么如果存在数字键值，又会有是什么表现方式呢？稍微改动下上一个栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$a = [&apos;a&apos; =&gt; &apos;apple&apos;, &apos;b&apos; =&gt; &apos;banana&apos;, 1];</div><div class="line"></div><div class="line">$b = [&apos;a&apos; =&gt; &apos;orange&apos;, &apos;c&apos; =&gt; &apos;cherry&apos;, 2];</div><div class="line"></div><div class="line">$c = $a + $b;</div><div class="line"></div><div class="line">var_dump($c);</div></pre></td></tr></table></figure>
<p>将会输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">array(4) &#123;</div><div class="line">  [&quot;a&quot;]=&gt;</div><div class="line">  string(5) &quot;apple&quot;</div><div class="line">  [&quot;b&quot;]=&gt;</div><div class="line">  string(6) &quot;banana&quot;</div><div class="line">  [0]=&gt;</div><div class="line">  int(1)</div><div class="line">  [&quot;c&quot;]=&gt;</div><div class="line">  string(6) &quot;cherry&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到和字符串表现一致。</p>
<p>再来测试下上面的代码， array_merge 的表现是怎样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$a = [&apos;a&apos; =&gt; &apos;apple&apos;, &apos;b&apos; =&gt; &apos;banana&apos;];</div><div class="line"></div><div class="line">$b = [&apos;a&apos; =&gt; &apos;orange&apos;, &apos;c&apos; =&gt; &apos;cherry&apos;];</div><div class="line"></div><div class="line">$c = array_merge($a, $b);</div><div class="line"></div><div class="line">var_dump($c);</div></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">array(3) &#123;</div><div class="line">  [&quot;a&quot;]=&gt;</div><div class="line">  string(6) &quot;orange&quot;</div><div class="line">  [&quot;b&quot;]=&gt;</div><div class="line">  string(6) &quot;banana&quot;</div><div class="line">  [&quot;c&quot;]=&gt;</div><div class="line">  string(6) &quot;cherry&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么正如文档中所说的，将会对相同的键值进行覆盖！那么对于数字键值是不是也是同样的处理呢？再看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$a = [&apos;a&apos; =&gt; &apos;apple&apos;, &apos;b&apos; =&gt; &apos;banana&apos;, 1];</div><div class="line"></div><div class="line">$b = [&apos;a&apos; =&gt; &apos;orange&apos;, &apos;c&apos; =&gt; &apos;cherry&apos;, 2];</div><div class="line"></div><div class="line">$c = $a + $b;</div><div class="line"></div><div class="line">var_dump($c);</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">array(5) &#123;</div><div class="line">  [&quot;a&quot;]=&gt;</div><div class="line">  string(6) &quot;orange&quot;</div><div class="line">  [&quot;b&quot;]=&gt;</div><div class="line">  string(6) &quot;banana&quot;</div><div class="line">  [0]=&gt;</div><div class="line">  int(1)</div><div class="line">  [&quot;c&quot;]=&gt;</div><div class="line">  string(6) &quot;cherry&quot;</div><div class="line">  [1]=&gt;</div><div class="line">  int(2)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，并没有进行覆盖!由此可以得出结论，当两个数组中含有数值健的时候，会进行附加，并且键值会从0开始重建索引键值。</p>
<p>参看资料：</p>
<ul>
<li><a href="http://stackoverflow.com/questions/7059721/array-merge-versus" target="_blank" rel="external">http://stackoverflow.com/questions/7059721/array-merge-versus</a></li>
<li><a href="http://php.net/manual/en/language.operators.array.php" target="_blank" rel="external">http://php.net/manual/en/language.operators.array.php</a></li>
<li><a href="http://php.net/manual/en/function.array-merge.php" target="_blank" rel="external">http://php.net/manual/en/function.array-merge.php</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，两种方法都能够实现两个或者多个数组之间的合并。但是，两个方法还是有差别的。&lt;/p&gt;
&lt;p&gt;+号操作符返回的是右边的数组附加到左边的结果数组。如果存在一个键值都存在两个数组中，那么左边的将会使用，不会被右边的数据给覆盖。&lt;/p&gt;
&lt;p&gt;举个栗子： &lt;/p&gt;
&lt;figur
    
    </summary>
    
      <category term="PHP" scheme="http://blog.lzuer.net/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://blog.lzuer.net/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Redis和Memcache的区别</title>
    <link href="http://blog.lzuer.net/2016/06/07/difference-between-redis-and-memcache/"/>
    <id>http://blog.lzuer.net/2016/06/07/difference-between-redis-and-memcache/</id>
    <published>2016-06-07T21:57:23.000Z</published>
    <updated>2016-09-01T01:39:07.502Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>Redis中，并不是所有的数据都一直存在内存中，这是和memcache的最大区别</li>
<li>Redis不仅仅支持简单的k/v类型的数据，同时还提供list, set, hash等数据结构</li>
<li>Redis支持数据备份，即master-slave模式的数据备份</li>
<li>Redis支持数据的持久化，可以将内存中的数据保存到磁盘上，服务器重启的时候可以再次加载。</li>
</ol>
<p>Redis作者对Redis和memcache进行的比对：</p>
<p>没有必要过多的关心性能，因为二者的性能都已经足够高了。由于Redis使用单核，而memcache可以使用多核，所以在比较上，平均每一个核上Redis在存储小数据时比memcache性能更高。而在100k以上的数据中，memcache性能高于Redis，最终，无论使用哪一个，每秒处理请求的次数都不会成为瓶颈。(比如瓶颈可能会在网卡)</p>
<p>如果要说内存使用效率，使用简单的key-value存储的话，memcache的内存利用率更高，而如果Redis采用hash结构来做key-value存储，由于其组合式的压缩，其内存利用率会高于memcache。</p>
<p>如果你对数据持久化和数据同步有所要求，那么推荐你选择Redis，因为这两个特性Memcached都不具备。即使你只是希望在升级或者重启系统后缓存数据不会丢失，选择Redis也是明智的。</p>
<p>当然，最后还得说到你的具体应用需求。Redis相比Memcached来说，拥有更多的数据结构和并支持更丰富的数据操作，通常在Memcached里， 你需要将数据拿到客户端来进行类似的修改再set回去。这大大增加了网络IO的次数和数据体积。在Redis中，这些复杂的操作通常和一般的 GET/SET一样高效。所以，如果你需要缓存能够支持更复杂的结构和操作，那么Redis会是不错的选择。</p>
<p>1、 Redis和Memcache都是将数据存放在内存中，都是内存数据库。不过memcache还可用于缓存其他东西，例如图片、视频等等。<br>2、Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，hash等数据结构的存储。<br>3、虚拟内存–Redis当物理内存用完时，可以将一些很久没用到的value 交换到磁盘<br>4、过期策略–memcache在set时就指定，例如set key1 0 0 8,即永不过期。Redis可以通过例如expire 设定，例如expire name 10<br>5、分布式–设定memcache集群，利用magent做一主多从;redis可以做一主多从。都可以一主一从<br>6、存储数据安全–memcache挂掉后，数据没了；redis可以定期保存到磁盘（持久化）<br>7、灾难恢复–memcache挂掉后，数据不可恢复; redis数据丢失后可以通过aof恢复<br>8、Redis支持数据的备份，即master-slave模式的数据备份</p>
<p>参考：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000004012181" target="_blank" rel="external">https://segmentfault.com/a/1190000004012181</a></li>
<li><a href="http://stackoverflow.com/questions/19424193/difference-between-memcache-memcached-and-redis" target="_blank" rel="external">http://stackoverflow.com/questions/19424193/difference-between-memcache-memcached-and-redis</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Redis中，并不是所有的数据都一直存在内存中，这是和memcache的最大区别&lt;/li&gt;
&lt;li&gt;Redis不仅仅支持简单的k/v类型的数据，同时还提供list, set, hash等数据结构&lt;/li&gt;
&lt;li&gt;Redis支持数据备份，即master-slav
    
    </summary>
    
      <category term="Redis" scheme="http://blog.lzuer.net/categories/Redis/"/>
    
      <category term="Memcache" scheme="http://blog.lzuer.net/categories/Redis/Memcache/"/>
    
      <category term="NoSQL" scheme="http://blog.lzuer.net/categories/Redis/Memcache/NoSQL/"/>
    
    
      <category term="Redis" scheme="http://blog.lzuer.net/tags/Redis/"/>
    
      <category term="Memcache" scheme="http://blog.lzuer.net/tags/Memcache/"/>
    
      <category term="NoSQL" scheme="http://blog.lzuer.net/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>Install Golang on Centos</title>
    <link href="http://blog.lzuer.net/2016/05/27/install-golang-on-centos/"/>
    <id>http://blog.lzuer.net/2016/05/27/install-golang-on-centos/</id>
    <published>2016-05-27T18:57:23.000Z</published>
    <updated>2016-09-01T01:39:07.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p>首先确定操作系统位数, 可执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ uname -m</div></pre></td></tr></table></figure>
<p>如果输出为 <code>x86_64</code> 的话代表64位操作系统，如果为 <code>i386</code> 则为32为系统。</p>
<p>根据确定的系统位数下载对应版本的安装包，我的是系统是64，所以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget https://storage.googleapis.com/golang/go1.6.2.linux-amd64.tar.gz</div></pre></td></tr></table></figure>
<p>解压到安装目录, 我把go安装到 <code>/usr/local/go</code> 中，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ tar zxvf go1.6.2.linux-amd64.tar.gz</div><div class="line">$ mv go /usr/local</div></pre></td></tr></table></figure>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>添加 <code>GOROOT</code> 环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ export GOROOT=&quot;/usr/local/go&quot;</div></pre></td></tr></table></figure>
<p>可以通过执行 <code>env</code> 或者 <code>echo $GOROOT</code> 来确认环境变量是否正常设置.</p>
<p>设置PATH</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ export PATH=$PATH:/usr/local/go/bin</div></pre></td></tr></table></figure>
<h2 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go version</div></pre></td></tr></table></figure>
<p>输出 <code>go version go1.6.2 linux/amd64</code> 表示golang已经成功安装！</p>
<h2 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h2><p>剩下一步比较重要的就是设置 <code>GOPATH</code>, 详情可查看<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.2.md" target="_blank" rel="external">资料</a></p>
<p>例如我将GOPATH设置为 <code>/home/go</code>  为我的工作空间：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ export GOPATH=&quot;/home/go&quot;</div></pre></td></tr></table></figure>
<p><code>/home/go</code>的目录结构为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-- go</div><div class="line">  --bin</div><div class="line">  --pkg</div><div class="line">  --src</div></pre></td></tr></table></figure>
<p>有关目录结构的介绍可以参考：<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.2.md" target="_blank" rel="external">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.2.md</a></p>
<p>至此Golang已经成功安装！</p>
<h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><p>直接在命令行运行 <code>$ export PATH=$PATH:/usr/local/go</code>， 只会在当前会话有效，登出或者注销系统后，PATH的设置就会失效。</p>
<p>如果想永久保存设置，则需要修改<code>/etc/profile</code>，在末尾加上(如果之前没有添加过的话):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PATH=$PATH:/usr/local/go</div><div class="line">export PATH</div><div class="line">GOPATH=/home/go</div><div class="line">export GOPATH</div></pre></td></tr></table></figure>
<p>然后执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$source /etc/profile</div></pre></td></tr></table></figure>
<p>之后可以通过 <code>echo $PATH</code> 来查看设置是否生效。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Download&quot;&gt;&lt;a href=&quot;#Download&quot; class=&quot;headerlink&quot; title=&quot;Download&quot;&gt;&lt;/a&gt;Download&lt;/h2&gt;&lt;p&gt;首先确定操作系统位数, 可执行：&lt;/p&gt;
&lt;figure class=&quot;highlight 
    
    </summary>
    
      <category term="Golang" scheme="http://blog.lzuer.net/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://blog.lzuer.net/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Validator on the fly</title>
    <link href="http://blog.lzuer.net/2016/05/09/validator-on-the-fly/"/>
    <id>http://blog.lzuer.net/2016/05/09/validator-on-the-fly/</id>
    <published>2016-05-09T16:53:42.000Z</published>
    <updated>2016-09-01T01:39:07.506Z</updated>
    
    <content type="html"><![CDATA[<p>首先从一个现实的需求中说起，在接口业务中有多个版本，突然在开发第三个版本的<br>时候其中有一条需求就是把用户提交的评分值由原来的允许的<code>1, 2, 3, 4, 5</code> 改成允许输入 <code>0, 2, 4, 6, 8, 10</code></p>
<p>自定义的<code>validator</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//ScoreValidator.php</div><div class="line">class ScoreValidator extends Validator</div><div class="line">&#123;</div><div class="line">    protected function validateValue($value)</div><div class="line">    &#123;</div><div class="line">        if (in_array($value, [1, 2, 3, 4, 5])) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return [$this-&gt;message, []];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//User.php</div><div class="line">public function rules()</div><div class="line">&#123;</div><div class="line">    return [</div><div class="line">        ...</div><div class="line">        [&apos;rate&apos;, ScoreValidator::className()],</div><div class="line">        ...</div><div class="line">    ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么应该如何做兼容性，来保证多个版本的接口中都按照规则来赋值呢？我第一个想到的是利用di来解决。</p>
<p>为什么这么想？可以参考下之前的<a href="http://blog.lzuer.net/2015/05/19/one-using-of-yii2-container/">一篇文章</a></p>
<p>那么我们来具体实施.</p>
<p>首先，接口版本控制的结构是遵循官方来的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">modules</div><div class="line">--v1</div><div class="line">   -- controllers</div><div class="line">   -- ...</div><div class="line">   -- Module.php</div><div class="line">--v2</div><div class="line">   -- controllers</div><div class="line">   -- ...</div><div class="line">   -- Module.php</div></pre></td></tr></table></figure>
<p>在这之前我们需要对之前定义的<code>ScoreValidator</code>进行下修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//ScoreValidator.php</div><div class="line">class ScoreValidator extends Validator</div><div class="line">&#123;</div><div class="line">    public $ranges = [0, 2, 4, 6, 8, 10];// 这里直接改成满足现有需求的数据区间</div><div class="line"></div><div class="line">    protected function validateValue($value)</div><div class="line">    &#123;</div><div class="line">        if (in_array($value, $this-&gt;ranges)) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return [$this-&gt;message, []];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们希望在v2版本的接口中来实现默认值的修改, 那么可以在原来的<code>v1</code>版本下的<code>Module::init</code>中来配置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Module extend \yii\base\Module</div><div class="line">&#123;</div><div class="line">    public function init()</div><div class="line">    &#123;</div><div class="line">        parent::init();</div><div class="line"></div><div class="line">        Yii::$container-&gt;set(ScoreValidator::className(), [</div><div class="line">            &apos;ranges&apos; =&gt; [1, 2, 3, 4, 5]</div><div class="line">        ]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在<code>v1</code>接口下的涉及到<code>ScoreValidator</code>验证的地方就会按照这个规则来进行验证了。同样新的需求也可以兼顾到。</p>
<p>利用Yii2的容器和依赖注入可以很轻松写意的实现更多，还需要我们不停的探索！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先从一个现实的需求中说起，在接口业务中有多个版本，突然在开发第三个版本的&lt;br&gt;时候其中有一条需求就是把用户提交的评分值由原来的允许的&lt;code&gt;1, 2, 3, 4, 5&lt;/code&gt; 改成允许输入 &lt;code&gt;0, 2, 4, 6, 8, 10&lt;/code&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="Yii2" scheme="http://blog.lzuer.net/categories/Yii2/"/>
    
    
      <category term="Yii2" scheme="http://blog.lzuer.net/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>关于switch在js中需要注意的地方</title>
    <link href="http://blog.lzuer.net/2016/05/07/upload-file-with-php/"/>
    <id>http://blog.lzuer.net/2016/05/07/upload-file-with-php/</id>
    <published>2016-05-07T00:17:39.000Z</published>
    <updated>2016-09-01T01:39:07.506Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="PHP" scheme="http://blog.lzuer.net/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://blog.lzuer.net/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>git tips - 1</title>
    <link href="http://blog.lzuer.net/2016/03/03/git-tips-one/"/>
    <id>http://blog.lzuer.net/2016/03/03/git-tips-one/</id>
    <published>2016-03-03T16:53:42.000Z</published>
    <updated>2016-09-01T01:39:07.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-tip-one"><a href="#git-tip-one" class="headerlink" title="git tip one"></a>git tip one</h1><p><strong>git config</strong></p>
<p><code>git config</code> 配置项由本地 &gt; 用户 &gt; 系统层级覆盖。</p>
<p>所以在本地某个仓库可以设置用户名和邮箱：</p>
<p>  git config user.name “light”<br>  git config user.email “light@qq.com”</p>
<p><strong>为常用命令设置快捷别名</strong></p>
<p>  git config alias.st status<br>  git config alias.ci commit</p>
<blockquote>
<p>同样可以使用<code>-g</code> 来进行全局配置</p>
</blockquote>
<p>使用：</p>
<p>  $ git st<br>  $ git ci</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git-tip-one&quot;&gt;&lt;a href=&quot;#git-tip-one&quot; class=&quot;headerlink&quot; title=&quot;git tip one&quot;&gt;&lt;/a&gt;git tip one&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;git config&lt;/strong&gt;&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="git" scheme="http://blog.lzuer.net/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.lzuer.net/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>在phpstorm中使用xdebug</title>
    <link href="http://blog.lzuer.net/2016/01/26/xdebug-phpstorm/"/>
    <id>http://blog.lzuer.net/2016/01/26/xdebug-phpstorm/</id>
    <published>2016-01-26T11:17:39.000Z</published>
    <updated>2016-09-01T01:39:07.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开启xdebug"><a href="#开启xdebug" class="headerlink" title="开启xdebug"></a>开启xdebug</h2><p>在<code>php.ini</code>中配置<code>xdebug</code>如下：</p>
<p>  [xdebug]<br>  xdebug.remote_enable = On<br>  xdebug.remote_handler = dbgp<br>  xdebug.remote_host= localhost<br>  xdebug.remote_port = 9000<br>  xdebug.idekey = PHPSTORM<br>  xdebug.profiler_enable = 1</p>
<p>重启服务之后在<code>phpinfo</code>中查看是否已经开启<code>xdebug</code>.</p>
<h2 id="配置phpstorm"><a href="#配置phpstorm" class="headerlink" title="配置phpstorm"></a>配置phpstorm</h2><ol>
<li><p>配置xdebug端口号</p>
<p>在 File &gt; Settings &gt; Langauges&amp;Frameworks 中找到 <code>PHP</code> 选择<code>Debug</code>选项卡,找到<code>xdebug</code>配置项，确认端口号是上面设置的<code>9000</code></p>
</li>
<li><p>配置DBGp Proxy</p>
<p> 点击<code>DBGp Proxy</code>选项卡，在里面设置:</p>
<p>   IDE Key: PHPSTORM<br>   Host:   localhost<br>   Port:   9000</p>
</li>
<li><p>添加 servers</p>
<p>找到 <code>Servers</code>选项卡,点击添加按钮添加一个配置信息。例如想调试部署好的虚拟地址：<code>www.app.local</code>,那么你需要在<code>Host</code>中填上该地址。<br>注意<code>Port</code>需要和你实际配置的端口要一直。另外保证<code>Debugger</code>为<code>Xdebug</code></p>
</li>
</ol>
<p>  这里主要记录下如何配合浏览器插件<code>Xdebug helper</code>来进行调试</p>
<h2 id="安装浏览器插件Xdebug-helper"><a href="#安装浏览器插件Xdebug-helper" class="headerlink" title="安装浏览器插件Xdebug helper"></a>安装浏览器插件<code>Xdebug helper</code></h2><p>  安装成功之后，在选线卡将你配置的domain进行添加。</p>
<h2 id="在postman中使用xdebug"><a href="#在postman中使用xdebug" class="headerlink" title="在postman中使用xdebug"></a>在postman中使用xdebug</h2><ol>
<li><p>Configure your xdebug (by editing php.ini) to attempt to debug every php script (xdebug.remote_autostart = 1)</p>
</li>
<li><p>Add xdebug session start parameter to the actual URL (XDEBUG_SESSION_START= – <a href="http://xdebug.org/docs/remote" target="_blank" rel="external">http://xdebug.org/docs/remote</a> ), for example: ?XDEBUG_SESSION_START=PHPSTORM</p>
</li>
<li><p>Pass xdebug cookie as one of the headers (the one which is set by bookmarklet or browser extension, for example)</p>
<p>参考文章:</p>
<ul>
<li><a href="http://my.oschina.net/u/248080/blog/351455" target="_blank" rel="external">http://my.oschina.net/u/248080/blog/351455</a></li>
<li><a href="http://stackoverflow.com/questions/19139803/xdebug-a-restful-server-using-phpstorm-or-postman" target="_blank" rel="external">http://stackoverflow.com/questions/19139803/xdebug-a-restful-server-using-phpstorm-or-postman</a></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开启xdebug&quot;&gt;&lt;a href=&quot;#开启xdebug&quot; class=&quot;headerlink&quot; title=&quot;开启xdebug&quot;&gt;&lt;/a&gt;开启xdebug&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;php.ini&lt;/code&gt;中配置&lt;code&gt;xdebug&lt;/code&gt;如下：
    
    </summary>
    
      <category term="xdebug" scheme="http://blog.lzuer.net/categories/xdebug/"/>
    
      <category term="phpstorm" scheme="http://blog.lzuer.net/categories/xdebug/phpstorm/"/>
    
    
      <category term="xdebug" scheme="http://blog.lzuer.net/tags/xdebug/"/>
    
      <category term="phpstorm" scheme="http://blog.lzuer.net/tags/phpstorm/"/>
    
  </entry>
  
  <entry>
    <title>配置travis来自动发布hexo博客</title>
    <link href="http://blog.lzuer.net/2016/01/18/auto-deploy-hexo-blog-using-travis/"/>
    <id>http://blog.lzuer.net/2016/01/18/auto-deploy-hexo-blog-using-travis/</id>
    <published>2016-01-18T23:59:20.000Z</published>
    <updated>2016-09-01T01:39:07.502Z</updated>
    
    <content type="html"><![CDATA[<p>首先在<a href="https://travis-ci.org" target="_blank" rel="external">travis</a>将你的项目加入到travis。</p>
<p>打开设置，添加token变量。</p>
<p><img src="http://7xq6zf.com1.z0.glb.clouddn.com/travis-setting.png" alt="add-token"></p>
<p>在这之前我们需要在<a href="https://github.com/settings/tokens" target="_blank" rel="external">github</a>, 生成一个token。</p>
<p><img src="http://7xq6zf.com1.z0.glb.clouddn.com/generate-github-token.png" alt="generate-token"></p>
<p>在项目的 <code>.travis.yml</code> 中可以进行如下配置：</p>
<pre><code>language: node_js
sudo: false
node_js:
  - 5.3.0

before_install:
  - git config --global user.name &quot;lichunqiang&quot;
  - git config --global user.email &quot;light-li@hotmail.com&quot;
  - git config --global push.default simple

install:
  - npm install hexo-cli -g

script:
  - git clone https://${token}@github.com/lichunqiang/lichunqiang.github.io.git .deploy_git -v
  - git --version
  - git remote add -f b https://${token}@github.com/lichunqiang/b.git
  - git fetch b
  - npm install

  - hexo g
  - cp -r public/* .deploy_git/
  - cd .deploy_git
  - git add -A
  - git commit -am &quot;Auto deploy from Travis-CI.&quot;
  - git push --force -q
</code></pre><p>这样就等着 <code>travis</code> 构建完成之后，我们就可以看到文件就会自动发布了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先在&lt;a href=&quot;https://travis-ci.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;travis&lt;/a&gt;将你的项目加入到travis。&lt;/p&gt;
&lt;p&gt;打开设置，添加token变量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http:
    
    </summary>
    
      <category term="hexo" scheme="http://blog.lzuer.net/categories/hexo/"/>
    
      <category term="travis" scheme="http://blog.lzuer.net/categories/hexo/travis/"/>
    
    
      <category term="hexo" scheme="http://blog.lzuer.net/tags/hexo/"/>
    
      <category term="travis" scheme="http://blog.lzuer.net/tags/travis/"/>
    
  </entry>
  
  <entry>
    <title>删除submodule</title>
    <link href="http://blog.lzuer.net/2016/01/16/git-delete-submoudle/"/>
    <id>http://blog.lzuer.net/2016/01/16/git-delete-submoudle/</id>
    <published>2016-01-16T00:16:21.000Z</published>
    <updated>2016-09-01T01:39:07.502Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>Delete the relevant section from the .gitmodules file.</p>
</li>
<li><p>Stage the .gitmodules changes git add .gitmodules</p>
</li>
<li><p>Delete the relevant section from .git/config.</p>
</li>
<li><p>Run git rm –cached path_to_submodule (no trailing slash).</p>
</li>
<li><p>Run rm -rf .git/modules/path_to_submodule</p>
</li>
<li><p>Commit git commit -m “Removed submodule <name>“</name></p>
</li>
<li><p>Delete the now untracked submodule files <code>rm -rf path_to_submodule</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;Delete the relevant section from the .gitmodules file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stage the .gitmodules changes git add .gitmodules&lt;/p&gt;
&lt;/
    
    </summary>
    
      <category term="git" scheme="http://blog.lzuer.net/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.lzuer.net/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>nginx重定向小例</title>
    <link href="http://blog.lzuer.net/2016/01/13/redirct-main-url-of-site/"/>
    <id>http://blog.lzuer.net/2016/01/13/redirct-main-url-of-site/</id>
    <published>2016-01-13T16:17:39.000Z</published>
    <updated>2016-09-01T01:39:07.506Z</updated>
    
    <content type="html"><![CDATA[<p><code>www.site.com</code> <code>site.com</code> 在配置nginx的时候都会指向我们的主站，但是需要注意的是在这里要进行一下跳转设置，</p>
<p>因为在不设置的话，在百度等收录的话就会当做成两个站点，就行重复收录。</p>
<p>配置nginx如下：</p>
<p>  server_name site.com www.site.com</p>
<p>  if ($host = ‘site.com’) {<br>    rewrite ^/(.*)$ <a href="http://www.site.com/$1" target="_blank" rel="external">http://www.site.com/$1</a> permanent;<br>  }</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;www.site.com&lt;/code&gt; &lt;code&gt;site.com&lt;/code&gt; 在配置nginx的时候都会指向我们的主站，但是需要注意的是在这里要进行一下跳转设置，&lt;/p&gt;
&lt;p&gt;因为在不设置的话，在百度等收录的话就会当做成两个站点，就行重复收录。&lt;/p&gt;

    
    </summary>
    
      <category term="nginx" scheme="http://blog.lzuer.net/categories/nginx/"/>
    
      <category term="seo" scheme="http://blog.lzuer.net/categories/nginx/seo/"/>
    
    
      <category term="nginx" scheme="http://blog.lzuer.net/tags/nginx/"/>
    
      <category term="seo" scheme="http://blog.lzuer.net/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>如果将多个commit精简成一个commit</title>
    <link href="http://blog.lzuer.net/2016/01/11/squash-all-commits-related-to-a-single-issue-into-single-commit/"/>
    <id>http://blog.lzuer.net/2016/01/11/squash-all-commits-related-to-a-single-issue-into-single-commit/</id>
    <published>2016-01-11T22:22:25.000Z</published>
    <updated>2016-09-01T01:39:07.506Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="https://www.github.com" target="_blank" rel="external">Github</a> 上进行协作或者贡献开源项目代码时, 我们常常会对项目发起 <code>pull request</code>。</p>
<p>在项目的作者对发起的 <code>pull request</code> 进行审核时, 常常需要我们对修改进行进一步的修订, 以满足作者的需求。方便的是，</p>
<p>这一切在 <a href="https://www.github.com" target="_blank" rel="external">Github</a> 上被方便的给自动完成了，也就说，当我们在对 <code>patch</code> 分支 <code>push</code> 修改代码时，</p>
<p><a href="https://www.github.com" target="_blank" rel="external">Github</a> 自动会将修改关联到上次已经发起的 <code>pull request</code>。</p>
<p>当这一切都<strong>ready</strong>之后，我们需要精简提交信息变成一条，例如： <code>Issue #100: bugfix for fatal error</code>.</p>
<pre><code>commit 6e9cd88424b5f313f7245c7a43e11063648f2dcd
Author: lichunqiang &lt;light-li@hotmail.com&gt;
Date:   Mon Jan 11 16:40:41 2016 +0800

    tweak the description

commit 06ce7e35206b0f8a2e5d41aab4ae21d842a7c8ab
Author: lichunqiang &lt;light-li@hotmail.com&gt;
Date:   Sun Jan 10 23:04:25 2016 +0800

    bugfix of mailer

commit e6e0ee8ec14624d11035a0a922617ab5dc69220f
Author: lichunqiang &lt;light-li@hotmail.com&gt;
Date:   Sun Jan 10 22:57:25 2016 +0800

    commit message
</code></pre><p>在 git log 信息中，我们想要压缩最新的两条commit为一条</p>
<p>我们可以按照以下的步骤来进行：</p>
<pre><code>$ git rebase -i HEAD~2
</code></pre><blockquote>
<p>2 代表我们想要压缩的commit数量。注意，在这之前，我们要保证我们的分支要和主线进行了同步。</p>
</blockquote>
<p>执行命令后，在 text editor 中我们将 <code>pick</code> 替换成 <code>squash</code>, 只保留我们想保存的那条 <code>commit</code> 即可。</p>
<p>也可以只保留第一条的 <code>pick</code>, 将其余的替换成 <code>squash</code>。保存并退出编辑器。</p>
<p><strong>注意</strong>，如果你已经提交到远程仓库，你需要执行:</p>
<pre><code>$ git push origin branchname --force
</code></pre><p>贴士：</p>
<p>你可以执行 <code>git commit --amend</code> 来修改最后一条commit的提交信息。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;a href=&quot;https://www.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt; 上进行协作或者贡献开源项目代码时, 我们常常会对项目发起 &lt;code&gt;pull request&lt;/code&gt;。&lt;/p&gt;

    
    </summary>
    
      <category term="Git" scheme="http://blog.lzuer.net/categories/Git/"/>
    
      <category term="github" scheme="http://blog.lzuer.net/categories/Git/github/"/>
    
    
      <category term="github" scheme="http://blog.lzuer.net/tags/github/"/>
    
      <category term="Git" scheme="http://blog.lzuer.net/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>多平台Git配置</title>
    <link href="http://blog.lzuer.net/2016/01/11/multiple-platform-git/"/>
    <id>http://blog.lzuer.net/2016/01/11/multiple-platform-git/</id>
    <published>2016-01-11T21:57:21.000Z</published>
    <updated>2016-09-01T01:39:07.506Z</updated>
    
    <content type="html"><![CDATA[<p>我们通常会混迹多个git平台, 这时我们需要配置能够在多个平台通用的ssh.</p>
<h2 id="设置用户名和邮箱"><a href="#设置用户名和邮箱" class="headerlink" title="设置用户名和邮箱"></a>设置用户名和邮箱</h2><pre><code>$git config --global user.name &quot;yourname&quot;
$git config --global user.email &quot;your@example.com&quot;
</code></pre><h2 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh-key"></a>生成ssh-key</h2><blockquote>
<p>ssh-key保存在 <code>~/.ssh</code> 目录中</p>
</blockquote>
<pre><code>$cd ~/.ssh
$ssh-keygen -t rsa -C &quot;your@example.com&quot;
</code></pre><p>注意在生成key file的时候可以针对不同的平台来命名, 例如：<code>id_github</code>, 这将会在接下的来的配置中用到.</p>
<p>生成<strong>Key</strong>之后就是将 <code>xx.pub</code> 的内容配置到平台的SSH配置中.</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在 <code>~/.ssh</code> 目录下新建 <code>config</code> 文件并编辑：</p>
<pre><code>Host git.coding.net
    User your@example.com
    IdentityFile ~/.ssh/coding_rsa
Host github.com
    User your@example.com
    IdentityFile ~/.ssh/github_rsa
</code></pre><h2 id="测试是否连接成功"><a href="#测试是否连接成功" class="headerlink" title="测试是否连接成功"></a>测试是否连接成功</h2><pre><code>$ssh -T git@git.coding.net
$ssh -T git@github.com
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们通常会混迹多个git平台, 这时我们需要配置能够在多个平台通用的ssh.&lt;/p&gt;
&lt;h2 id=&quot;设置用户名和邮箱&quot;&gt;&lt;a href=&quot;#设置用户名和邮箱&quot; class=&quot;headerlink&quot; title=&quot;设置用户名和邮箱&quot;&gt;&lt;/a&gt;设置用户名和邮箱&lt;/h2&gt;&lt;pr
    
    </summary>
    
      <category term="Git" scheme="http://blog.lzuer.net/categories/Git/"/>
    
      <category term="github" scheme="http://blog.lzuer.net/categories/Git/github/"/>
    
    
      <category term="github" scheme="http://blog.lzuer.net/tags/github/"/>
    
      <category term="Git" scheme="http://blog.lzuer.net/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>讲讲Composer配置项minimumn-stability</title>
    <link href="http://blog.lzuer.net/2015/12/29/talk-about-composer-minimum-stability/"/>
    <id>http://blog.lzuer.net/2015/12/29/talk-about-composer-minimum-stability/</id>
    <published>2015-12-29T23:57:23.000Z</published>
    <updated>2016-09-01T01:39:07.506Z</updated>
    
    <content type="html"><![CDATA[<p>Composer 对于每个包的版本都会进行稳定性检查，而低于设置的 <code>minimum-stability</code> 最低稳定性版本的包将不会被安装。</p>
<p>例如，当我们在项目中想要依赖一个尚未发布稳定版本的包时候通常会：<code>&quot;vendor/library&quot;: &quot;*&quot;</code>, 乍看上去并没有什么不妥, 但是当我们执行 <code>composer install</code> 或者 <code>composer update</code> 去下载包的时候通常会报错。</p>
<p>这是为什么呢？</p>
<p>通常我们的 <code>composer.json</code> 都不会显式的去设定 <code>minimum-stability</code>, 那么 <code>composer</code> 就会把他默认为 <code>stable</code>.</p>
<p>那么对于一个尚未发布版本的包来说, 明显是不符合的. 所以安装就不会成功.</p>
<p>所以有两个途径来解决：</p>
<ol>
<li>设定 <code>minimum-stability</code> 为 <code>dev</code></li>
</ol>
<p>显然这是简单粗暴的, 但是这种方法所面临的问题也很严重. 那就是我们去依赖某些开发版中的包, 这显然是我们所不想看到的.</p>
<ol>
<li>指定依赖包的版本, 这也是最佳的解决方案</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require vendor/library=dev-master</div></pre></td></tr></table></figure>
<p>所以, 当我们尝试去依赖一个开发中的包时, 推荐使用第二种方法！</p>
<p>另外我们还需要知道 <code>minimum-stability</code> 所支持的有：</p>
<ul>
<li>dev</li>
<li>alpha</li>
<li>beta</li>
<li>RC</li>
<li>stable</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Composer 对于每个包的版本都会进行稳定性检查，而低于设置的 &lt;code&gt;minimum-stability&lt;/code&gt; 最低稳定性版本的包将不会被安装。&lt;/p&gt;
&lt;p&gt;例如，当我们在项目中想要依赖一个尚未发布稳定版本的包时候通常会：&lt;code&gt;&amp;quot;vend
    
    </summary>
    
      <category term="PHP" scheme="http://blog.lzuer.net/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://blog.lzuer.net/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>删除一次错误的提交</title>
    <link href="http://blog.lzuer.net/2015/12/20/how-to-delete-one-commit-of-git/"/>
    <id>http://blog.lzuer.net/2015/12/20/how-to-delete-one-commit-of-git/</id>
    <published>2015-12-20T20:17:39.000Z</published>
    <updated>2016-09-01T01:39:07.502Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注意</strong>: <code>git reset --hard</code>会彻底删除你的变动,你可以在这之前使用 <code>git stash</code> 来保存变动。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard HEAD~1</div></pre></td></tr></table></figure>
<p><code>HEAD~1</code>代表当前提交之前的一次提交.</p>
<p>或者使用 <code>git log</code> 找到你想revert的commit_id：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard &lt;sha1-commit-id&gt;</div></pre></td></tr></table></figure>
<p>如果你已经提交到了远程仓库, 可以通过以下命令来抹掉提交：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin HEAD --force</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: &lt;code&gt;git reset --hard&lt;/code&gt;会彻底删除你的变动,你可以在这之前使用 &lt;code&gt;git stash&lt;/code&gt; 来保存变动。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
    
    </summary>
    
      <category term="git" scheme="http://blog.lzuer.net/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.lzuer.net/tags/git/"/>
    
  </entry>
  
</feed>
